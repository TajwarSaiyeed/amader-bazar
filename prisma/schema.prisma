generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(USER)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  wishlist      Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, email])
}

model Billboard {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  image      String
  message    String?
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[] @relation("category_to_product")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  total                 Float
  address               String
  phoneNumber           String
  userId                String      @db.ObjectId
  stripePaymentIntentId String?
  paymentStatus         String      @default("paid")
  orderStatus           OrderStatus @default(PENDING)
  customerName          String?
  customerEmail         String?
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  OrderItem             OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Product {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  images      ProductImage[] @relation("product_to_product_image")
  isFeatured  Boolean        @default(false)
  isArchived  Boolean        @default(false)
  category    Category       @relation("category_to_product", fields: [categoryId], references: [id])
  categoryId  String         @db.ObjectId
  OrderItem   OrderItem[]
  wishlist    Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId, name])
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  productId String   @db.ObjectId
  product   Product  @relation("product_to_product_image", fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
